function imageMorphologyParentHandle = imageMorphology(img)
%Interactive GUI for morphological operations.
%
% SYNTAX: imageMorphology(img) Creates a new instance of imageMorphology,
% operating on img
%
% See also: StrelTool, SegmentTool
%
% Copyright The MathWorks, 2012-14.

% Brett Shoelson, PhD Datestamp: 1/04/2011 MAJOR OVERHAUL; eliminates
% reliance on timer objects, object listeners. (Listeners were problematic
% with non-OO code.) Result is a much more stable, responsive application.
% (Fixes latency issues.) Also adds support for a number of different
% morphological operations. Adds auto-expand/contract button to grow/shrink
% the window. (This is particularly useful when imageMorphology is created
% as a child of a uipanel in a SegmentTool-like environment.)
%
% Minor: parent issues, issue with uppercase 'Cameraman.tif'; copyright
% issue.
% Datestamp: 2/16/2012
% Fixed some issues with writing of output string to
% Command Line. Also fixed issues with deprecated
% validation functions. Also hid expand/contract button
% if imageMorphology is a child of the root, rather than of a
% uipanel.
% Datestamp: 3/21/2012
% Fixed a bug in persistent auto-adjust after pressing
% the "Adjust Intensity" button. (Persistent
% clim=manual.)
% Datestamp: 8/8/2012
% Replaced deprecated "iptchecknargin" with narginchk,
% and provided image-loading capability when imageMorphology is
% a child of a figure. (Opens with default
% 'cameraman.tif' image if no input is provided.)
% Datestamp: 9/10/2012
% Suppressed expand/contract button--it creates more problems than it
% solves. Default now shows no morphological operation. (This is
% preferable for large images.) Also, fixed a problem with normalized
% position of axes, and repositioned a few items. Included Scott
% Hirsch's UIGETVARIABLES to manage loading of workspace variables.
% Datestamp: 4/2/2013
% Several small tweaks, including: adding highlight colors to the active
% tab panel; adding tooltipstrings; outputting of code to the Command
% Line on 'update' of image; . (Thanks to Abhijit Bhattacharjee for these
% suggestions.)
% Datestamp: 12/17/2013
% Replaced deprecated wavread with audioread
% Datestamp: 5/31/2014
% Modified for R2014b readiness.
% Datestamp: 9/17/2014
% Worked on right-click-reset not triggering callback issue.
% Datestamp: 10/3/2014
% Addressed several listener issues, fixed codegen for multi-parameter
% strels, several minor issues. RENAMED TO imageMorphology, Image
% Morphology app. No longer supports parent specification; cannot be
% childed to a specified figure, uipanel, etc.
% Datestamp: 10/14/2014
% Fixed code generation problem for normalization of entropy images.
% (Thanks, Jeff!)
% Datestamp: 1/29/15
% Fixed bug; if you "updated" before exporting, image name was empty.

% ENHANCEMENTS: zoom/pan, impixelinfo, impixelregion

narginchk(0,2);
singleton = true;
if singleton && ~isempty(findall(0,'name','Image Morphology'))
	delete(findall(0,'name','Image Morphology')); %Singleton
end

if nargin == 0
	img = 'cameraman.tif';
end
% INITIALIZATIONS:
if ischar(img)
	imgName = img;
	img = imread(img);
else
	imgName = 'Original Image';
end

imageMorphologyParent = [];
parentName = 'Image Morphology';
validateattributes(img, {'numeric','char','logical'}, {}, mfilename, 'img', 1);

highlightColor = [0.85 0.9 0.9];

bgcolor = [];strelVal = [];isNormalized = false;
try
	bgcolor = get(imageMorphologyParent,'backgroundcolor');
end
if isempty(bgcolor)
	bgcolor = [0.553 0.659 0.678];
end

imageMorphologyParent = figure('numbertitle','off',...
	'Units','normalized',...
	'WindowStyle','normal',...
	'Position',[0.05 0.087 0.9 0.829 ],...
	'Tag','imageMorphologyParent',...
	'Name','Image Morphology',...
	'NumberTitle','off',...
	'Visible','on',...
	'Color', bgcolor,...
	'MenuBar','none',...
	'ToolBar','auto',...
	'Resize','on');
imageMorphologyParentHandle = imageMorphologyParent;
%
% tbc = 240/255; %toolbar color, approximately
if isgraphics(imageMorphologyParent,'figure')
	ht = uitoolbar(imageMorphologyParent);
	tmp = im2double(imread('file_open.png'));
	tmp(tmp==0) = NaN;
	loadImageTool = uitoggletool(ht,...
		'CData', tmp,...
		'oncallback', @GetNewFile,...
		'offcallback', '',...
		'Tooltipstring', 'Load new image',...
		'Tag', 'loadImageTool');
end
annotation('textbox',[0.475 0.9475 0.505 0.0275],...
	'string','CLICK ON AN IMAGE TO VIEW IT IN A LARGER WINDOW.',...
	'color', [0.043137 0.51765 0.78039]*0.8,...
	'horizontalalignment','c','fontweight','b','fontsize',8,...
	'verticalalignment','m',...
	'backgroundcolor',bgcolor*1.3);

% (For STRELTOOL)
streltoolPanel = uipanel('parent',imageMorphologyParent,...
	'Units','normalized',...
	'Position',[0.020 0.422 0.43 0.553 ],...
	'Tag','streltoolPanel',...
	'TitlePosition','lefttop',...
	'BorderType','etchedin',...
	'BorderWidth',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'FontName','MS Sans Serif',...
	'FontSize',8.000,...
	'HighlightColor',[1.000 1.000 1.000 ],...
	'ShadowColor',[0.500 0.500 0.500 ]);

% (For Morphological Operators)
morphologicalOperatorsPanel = uibuttongroup('parent',imageMorphologyParent,...
	'Units','normalized',...
	'Position',[0.020 0.16 0.43 0.239 ],...
	'Tag','morphologicalOperatorsPanel',...
	'Title','REQUESTED MORPHOLOGICAL OPERATION',...
	'TitlePosition','lefttop',...
	'BorderType','etchedin',...
	'BorderWidth',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'FontName','MS Sans Serif',...
	'FontSize',8.000,...
	'HighlightColor',[1.000 1.000 1.000 ],...
	'ShadowColor',[0.500 0.500 0.500 ]);
%
[objpos,objdim] = distributeObjects(3,0.02, 0.45, 0.01);
uicontrol('parent',imageMorphologyParent,...
	'style','pushbutton',...
	'Units','normalized',...
	'Tag','ActivateAlteredImage',...
	'string','Activate Altered Image',...
	'tooltipstring','Accept current processing, and activate current image to allow serial morphological operations.',...
	'Position',[objpos(1) 0.11 objdim 0.035 ],...
	'callback',@updateImage);

uicontrol('parent',imageMorphologyParent,...
	'style','pushbutton',...
	'Units','normalized',...
	'string','Adjust Intensity',...
	'tooltipstring','Adjust dynamic range of image: IMSHOW(*,[]); for visualization only.',...
	'Position',[objpos(2) 0.11 objdim 0.035 ],...
	'callback',@imadjustIt);

autoadjust = uicontrol('parent',imageMorphologyParent,...
	'style','checkbox',...
	'Units','normalized',...
	'string','Auto-Adjust Intensity',...
	'tooltipstring','Automatically adjust dynamic range of image: IMSHOW(*,[]); for visualization only.',...
	'BackgroundColor',bgcolor,...
	'Position',[objpos(1) 0 objdim 0.035 ],...
	'value',0);

if ~strcmp(parentName,'Image Morphology')
	tmp = ['EXPORT to ', parentName];
else
	tmp = 'EXPORT';
end
uicontrol('parent',imageMorphologyParent,...
	'style','pushbutton',...
	'Units','normalized',...
	'string',tmp,...
	'tag','exportImageButton',...
	'Position',[objpos(3) 0.11 objdim 0.035 ],...
	'foregroundcolor','r',...
	'tooltipstring','Write modified image to Base workspace and write reproduction steps to Command Window.',...
	'callback',{@exportImage,imageMorphologyParent});

instructBox = uicontrol('parent',imageMorphologyParent,...
	'style','listbox',...
	'units','normalized',...
	'position',[0.02 0.03 0.43 0.075],...
	'BackgroundColor',highlightColor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'FontName','MS Sans Serif',...
	'FontSize',8.000,...
	'Max',3,...
	'Min',1,...
	'horizontalalignment','left',...
	'tag','instructBox',...
	'string','');

tabLabels = {'StrelTool (SE)','StrelTool2 (SE2)','Non-Strel Parameters'};
[mainTabHandle,tabCardHandles,tabHandles] = ...
	tabPanel(streltoolPanel,tabLabels,...
	'tabpos','t',...
	'tabheight',60,...
	'colors',[min(1,bgcolor*1.2);bgcolor*0.9;bgcolor*0.6],...
	'highlightColor',[1 1 0],...
	'TabCardPVs',{'bordertype','etchedin','title',''},...
	'TabLabelPVs',{'fontsize',10,'fontweight','n'}); %#ok<NASGU,ASGLU>
set(tabHandles{1}(1),...
	'tooltipstring',sprintf('This is the main StrelTool panel.\nUse it whenever you have to specify a single structuring element.'))
set(tabHandles{1}(2),...
	'tooltipstring',sprintf('This is the secondary StrelTool panel.\nUse it whenever you have to specify _two_ structuring elements.\n(In particular, this is useful for the two-strel syntax of |bwhitmiss|.)\nSee NOTES in Comment Panel below.'))
set(tabHandles{1}(2:3),'enable','off')
% Populate STRELTOOL1 TAB
strel1Parent = tabCardHandles{1}(1);
[~,~,~,strelButtons,strelSliders,strelShapeButtonGroup,diskPopup] = StrelTool(strel1Parent);
SE = StrelTool(strel1Parent,[],true);

% Populate STRELTOOL2 TAB
strel2Parent = tabCardHandles{1}(2);
[~,~,~,strelButtons2,strelSliders2,strelShapeButtonGroup2,diskPopup2] = StrelTool(strel2Parent,'SE2');
SE2 = StrelTool(strel2Parent,[],true);

% Populate MISCELLANEOUS CONTROLS TAB
miscUicontrolParent = tabCardHandles{1}(3);
bgc = get(miscUicontrolParent,'backgroundcolor');
highlightColor = [0.8 0.8 0.8];
sliderPanel(miscUicontrolParent, ...
	{'title','Minimum Blob Size','pos',[0.05 0.8 0.4 0.15],...
	'backgroundcolor', bgc,...
	'fontsize',8,'foregroundcolor','w'},...
	{'backgroundcolor', highlightColor,...
	'min',0,'max',1000,'value',0,'tag','minBlobSize','callback',@morphOp},...
	{'backgroundcolor',highlightColor,'fontsize',8},...
	{'backgroundcolor', bgc,'fontsize',8,'foregroundcolor','w'},...
	'%0.0f');
uicontrol('parent',miscUicontrolParent,...
	'style','text',...
	'units','normalized',...
	'position',[0.05 0.7 0.4 0.05],...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'horizontalalignment','l',...
	'string','Connectivity');
uicontrol('parent',miscUicontrolParent,...
	'style','listbox',...
	'units','normalized',...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'string',{4,8,6,18,26},...
	'value',1,...
	'position',[0.05 0.5225 0.175 0.175],...
	'tag','connectivityValue',...
	'callback',@morphOp);
uicontrol('parent',miscUicontrolParent,...
	'style','text',...
	'units','normalized',...
	'position',[0.275 0.7 0.4 0.05],...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'horizontalalignment','l',...
	'string','Distance Metric');
uicontrol('parent',miscUicontrolParent,...
	'style','listbox',...
	'units','normalized',...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'string',{'euclidean', 'cityblock', 'chessboard', 'quasi-euclidean'},...
	'value',1,...
	'position',[0.275 0.5225 0.175 0.175],...
	'tag','distanceMetric',...
	'callback',@morphOp);
uicontrol('parent',miscUicontrolParent,...
	'style','text',...
	'units','normalized',...
	'position',[0.55 0.9 0.4 0.05],...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'horizontalalignment','l',...
	'string','BWMorph Operation');
matchStrings = {'bothat', 'branchpoints', 'bridge', 'clean', 'close',...
	'diag', 'dilate', 'endpoints', 'erode', 'fatten', 'fill', 'hbreak',...
	'majority', 'perim4', 'perim8', 'open', 'remove', 'shrink', 'skeleton',...
	'spur', 'thicken', 'thin', 'tophat'};
uicontrol('parent',miscUicontrolParent,...
	'style','listbox',...
	'units','normalized',...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'string',matchStrings,...
	'value',1,...
	'position',[0.55 0.5225 0.175 0.375],...
	'tag','requestedBWMorphOperation',...
	'callback',@morphOp);
sliderPanel(miscUicontrolParent, ...
	{'title','BWMorph Times','pos',[0.775 0.7775 0.175 0.15],...
	'backgroundcolor', bgc,...
	'fontsize',8,'foregroundcolor','w'},...
	{'backgroundcolor', highlightColor,...
	'min',0,'max',100,'value',1,'tag','bwmorphTimes','callback',@morphOp},...
	{'backgroundcolor',highlightColor,'fontsize',8},...
	{'backgroundcolor', bgc,'fontsize',8,'foregroundcolor','w'},...
	'%0.0f');
uicontrol('parent',miscUicontrolParent,...
	'style','checkbox',...
	'units','normalized',...
	'backgroundcolor', bgc,...
	'foregroundcolor','w',...
	'string','Infinite',...
	'value',0,...
	'position',[0.775 0.695 0.175 0.075],...
	'tag','bwmorphInf',...
	'callback',@morphOp);
%
[objpos,objdim] = distributeObjects(2,0.03, 0.95, 0.075);
axes1 = axes('parent',imageMorphologyParent,...
	'Units','normalized',...
	'Position',[0.475 0.915-0.4*objdim 0.4*0.505 0.4*objdim],...
	'Tag','imageMorphologyAxes1',...
	'LineWidth',0.500,...
	'FontName','Helvetica',...
	'FontSize',10.000,...
	'FontUnits','points',...
	'FontWeight','normal',...
	'FontAngle','normal',...
	'Color',[1.000 1.000 1.000 ],...
	'DataAspectRatio',[1.000 1.000 1.000]);
%
axes2 = axes('parent',imageMorphologyParent,...
	'Units','normalized',...
	'Position',[0.475 objpos(1) 0.505 0.7-objpos(1)],...
	'Tag','imageMorphologyAxes2',...
	'LineWidth',0.500,...
	'FontName','Helvetica',...
	'FontSize',10.000,...
	'FontUnits','points',...
	'FontWeight','normal',...
	'FontAngle','normal',...
	'Color',[1.000 1.000 1.000 ],...
	'DataAspectRatio',[1.000 1.000 1.000]);

%
[objpos,objdim] = distributeObjects(7,0.95, 0.05, 0.025);
[hobjpos,hobjdim] = distributeObjects(3,0.025, 0.975, 0.01);


% SUPPORTED MORPHOLOGICAL OPERATIONS:
% 1 IMDILATE
% 2 IMERODE
% 3 IMOPEN
% 4 IMCLOSE
% 5 IMTOPHAT
% 6 IMBOTHAT
% 7 GRADIENT (Dilation - Erosion)
% Ref: DIPUM 2e, p.524
% 8 ENTROPY
% 9 CONTRAST Enhancement (Image + Tophat - Bothat)
%      Ref: DIPUM 2e, p. 529
% 10 BWHITMISS
% 11 BWAREAOPEN
% 12 BWDIST
% 13 BWULTERODE
% 14 IMRECONSTRUCT %SUPPRESS!
SelectMorphType = gobjects(14,1);
SelectMorphType(1) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(1) hobjdim objdim],...
	'String','IMDILATE',...
	'Tag','radiobutton1',...
	'Value',1.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','IM2 = imdilate(IM,SE)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(2) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(2) hobjdim objdim],...
	'String','IMERODE',...
	'Tag','radiobutton2',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','IM2 = imerode(IM,SE)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(3) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(3) hobjdim objdim],...
	'String','IMOPEN',...
	'Tag','radiobutton3',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString',sprintf('IM2 = imopen(IM,SE)\nErosion followed by Dilation'),...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(4) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(4) hobjdim objdim],...
	'String','IMCLOSE',...
	'Tag','radiobutton4',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString',sprintf('IM2 = imclose(IM,SE)\nDilation followed by Erosion'),...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(5) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(5) hobjdim objdim],...
	'String','IMTOPHAT',...
	'Tag','radiobutton5',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString',sprintf('IM2 = imtophat(IM,SE)\nImage - imopen(Image)'),...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(6) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(6) hobjdim objdim ],...%23.400 7.044 17.400 1.769
	'String','IMBOTHAT',...
	'Tag','radiobutton6',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString',sprintf('IM2 = imbothat(IM,SE)\nimclose(Image) - Image'),...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(7) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(1) objpos(7) hobjdim objdim],...
	'String','GRADIENT Image',...
	'Tag','radiobutton7',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','imdilate(Image) - imerode(Image)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(8) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(1) hobjdim objdim],...%23.400 4.352 17.400 1.769
	'String','ENTROPY FILTER',...
	'Tag','radiobutton8',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','J = entropyfilt(I,NHOOD); [NOTE: NHOOD is defined automatically by GETNHOOD(SE).]',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(9) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(2) hobjdim objdim],...
	'String','CONTRAST Enhancement',...
	'Tag','radiobutton9',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','Image + Tophat - Bothat',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(10) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(3) hobjdim objdim],...
	'String','BWHITMISS',...
	'Tag','radiobutton10',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','BW2 = bwhitmiss(BW1,SE1,SE2); (Preserves: Hit SE1 AND Miss SE2)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(11) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(4) hobjdim objdim],...
	'String','BWAREAOPEN',...
	'Tag','radiobutton11',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','BW2 = bwareaopen(BW, minBlobSize, Connectivity)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(12) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(5) hobjdim objdim],...
	'String','BWDIST',...
	'Tag','radiobutton12',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','BW2 = bwdist(BW, distanceMetric)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(13) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(6) hobjdim objdim],...
	'String','BWULTERODE',...
	'Tag','radiobutton13',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','BW2 = bwulterode(BW, distanceMetric, Connectivity)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
SelectMorphType(14) = uicontrol('parent',morphologicalOperatorsPanel,...
	'Style','radiobutton',...
	'Units','Normalized',...
	'Position',[hobjpos(2) objpos(7) hobjdim objdim],...
	'String','BWMORPH',...
	'Tag','radiobutton14',...
	'Value',0.000,...
	'Min',0.000,...
	'Max',1.000,...
	'BackgroundColor',bgcolor,...
	'ForegroundColor',[0.000 0.000 0.000 ],...
	'ListboxTop',1.000,...
	'TooltipString','BW2 = bwmorph(BW,OPERATION,N)',...
	'SliderStep',[0.010 0.100 ],...
	'FontName','MS Sans Serif',...
	'HorizontalAlignment','center',...
	'FontSize',7,...
	'Enable','on');
%
% SelectMorphType(15) = uicontrol('parent',morphologicalOperatorsPanel,...
% 	'Style','radiobutton',...
% 	'Units','Normalized',...
% 	'Position',[hobjpos(3) objpos(1) hobjdim objdim],...
% 	'String','IMRECONSTRUCT',...
% 	'Tag','radiobutton14',...
% 	'Value',0.000,...
% 	'Min',0.000,...
% 	'Max',1.000,...
% 	'BackgroundColor',bgcolor,...
% 	'ForegroundColor',[0.000 0.000 0.000 ],...
% 	'ListboxTop',1.000,...
% 	'TooltipString','IM = imreconstruct(marker,mask,conn)',...
% 	'SliderStep',[0.010 0.100 ],...
% 	'FontName','MS Sans Serif',...
% 	'HorizontalAlignment','center',...
% 	'FontSize',7,...
% 	'Enable','on');


% Initial Display
altered = img;
originalImg = imshow(img,'parent',axes1);
set(originalImg,'tag','imageMorphologyImg');
title(imgName);
if exist('expandAxes','file')==2
	expandAxes(axes1);
end
set(axes1,'ActivePositionProperty','outerPosition')
morphAlteredImg = imshow(altered,'parent',axes2);
set(morphAlteredImg,'tag','imageMorphologyImg');
if exist('expandAxes','file')==2
	expandAxes(axes2);
end
%
set(axes1,'visible','on','xtick',[],'ytick',[])
set(axes2,'visible','on','xtick',[],'ytick',[])
title(axes1,imgName)
title(axes2,'Morphologically Altered Image');
setappdata(imageMorphologyParent,'currSelection',1);

% LISTENERS to trigger MorphOp %%%%%%%%%%%%%%%%%%%%%%%%%%%

%NOTE: Listening to the radiobutton values can be problematic because they
%trigger on on->off and on off->on. I prefer to listen to the
%selectedObject property of the parent uibuttongroup instead. HOWEVER, that
%property appears NOT to be listenable R2014b (G1149914). So in R14b I
%listen to the radiobutton values instead, and inside of the (morphOp)
%callback, I escape if the trigger is from a radiobutton going from on to
%off.

allStrelButtons = [strelButtons(:);strelButtons2(:)];
allStrelSliders = [strelSliders(:);strelSliders2(:)];
if verLessThan('matlab','8.4') %<=R14a
	%Listen to the button groups and the sliders:
	addlistener(strelShapeButtonGroup,'SelectedObject','PostSet',@morphOp);
	addlistener(strelShapeButtonGroup2,'SelectedObject','PostSet',@morphOp);
	%NOTE: The non-for-loop version is supported in R2014b+, but not before!
	for ii = 1:numel(allStrelSliders)
		addlistener(allStrelSliders(ii),'Value','PostSet',@morphOp);
	end
else %>=R14b
	%Because the buttongroup 'selectedObject' property is not listenable in
	%R14b, listen to the radiobuttons and the sliders:
 	addlistener(allStrelButtons,'Value','PostSet',@morphOp);
	addlistener(allStrelSliders,'Value','PostSet',@morphOp);
end
addlistener(diskPopup,'Value','PostSet',@morphOp);
addlistener(diskPopup2,'Value','PostSet',@morphOp);
set(morphologicalOperatorsPanel,'SelectionChangeFcn',@morphOp)
% LISTENERS to trigger MorphOp %%%%%%%%%%%%%%%%%%%%%%%%%%%

set(imageMorphologyParent,'Handlevisibility','callback');
set([axes1,axes2],'Handlevisibility','callback');
if nargout < 1
	clear imageMorphologyParentHandle
end

% START NESTED FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	function altered = morphOp(varargin)
		if nargin ~= 0
			callerObj = varargin{2};
		else
			callerObj = [];
		end
		if isa(callerObj,'event.PropertyEvent') && ...
				strcmp(callerObj.AffectedObject.Style,'radiobutton') && ...
				callerObj.AffectedObject.Value == 0
			% No callback on radiobutton -> off
			return
		end
		imgIsBinary = islogical(img);
		% This makes the app more reliable--gives StrelTool and imageMorphology
		% time to synchronize:
		pause(0.5)
		[SE,strelVal] = StrelTool(strel1Parent,[],true); %TRIGGER UPDATE
		if isempty(strelVal)
			% Strel not defined...maybe an arbitrary strel not found in
			% base?
			return
		end
		%strelVal
		% This construct allows the user to be able to
		% change the name of the variable in STRELTOOL
		% without causing problems here
		ind = find(cell2mat(get(SelectMorphType,'value')));
		if isempty(ind)
			ind = getappdata(imageMorphologyParent,'currSelection');
			set(SelectMorphType(ind),'value',1);
		else
			setappdata(imageMorphologyParent,'currSelection',ind);
		end
		request = get(SelectMorphType(ind),'string');
		tt = get(SelectMorphType(ind),'Tooltipstring');
		try %#ok This is in a try structure bc when the parent is not a figure, it will otherwise error
			set(imageMorphologyParent,'pointer','watch');
			set([SelectMorphType;allStrelButtons;allStrelSliders],'enable','off')
		end
		% OTHER MORPHOLOGICAL OPERATORS of note...(there are more!):
		% imclearborder Suppress light structures connected to image border
		% imextendedmax/min Extended-maxima and -minima transforms
		% imimposemin Impose minima
		% watershed Find image watershed
		
		% Which tab panel is currently active?
		% activePanel = find(strcmp(get(cell2mat(tabCardHandles(:)),'visible'),'on'));
		drawnow;
		% Manage changing of tab panels first
		switch request
			case {'BWAREAOPEN','BWULTERODE','BWDIST','BWMORPH'} %Use panel 3
				tabPanel(tabCardHandles,tabHandles{1}(3));
				set(tabHandles{1}(1:2),'enable','off')
				set(tabHandles{1}(3),'enable','on')
				strings = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'string');
				distMethod = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'value');
				distMethod = strings{distMethod};
				strings = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'string');
				connectivityValue = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'value');
				connectivityValue = str2double(strings{connectivityValue});
			case {'BWHITMISS'} %Allow use of panel 2
				tabPanel(tabCardHandles,tabHandles{1}(1))
				set(tabHandles{1}(1:2),'enable','on')
				set(tabHandles{1}(3),'enable','off')
			otherwise
				tabPanel(tabCardHandles,tabHandles{1}(1))
				set(tabHandles{1}(2:3),'enable','off')
				set(tabHandles{1}(1),'enable','on')
		end
		throwComment([tt ' '],0,0)
		switch request
			case 'IMDILATE'
				altered = imdilate(img,SE);
			case 'IMERODE'
				altered = imerode(img,SE);
			case 'IMOPEN'
				altered = imopen(img,SE);
				throwComment('Erosion, followed by dilation.',0,1);
			case 'IMCLOSE'
				altered = imclose(img,SE);
				throwComment('Dilation, followed by erosion.',0,1);
			case 'IMTOPHAT'
				altered = imtophat(img,SE);
				throwComment('Original - Imopen.',0,1);
			case 'IMBOTHAT'
				altered = imbothat(img,SE);
				throwComment('Imclose - Original.',0,1);
			case 'GRADIENT Image'
				altered = imsubtract(imdilate(img,SE),imerode(img,SE));
				throwComment('Dilation, followed by erosion.',0,1);
			case 'ENTROPY FILTER'
				% Requires odd x odd neighborhood
				H = getnhood(SE);
				sizeH = size(H);
				if any(floor(sizeH/2) == (sizeH/2))
					msg1 = 'This function expects NHOOD to have a size that ';
					msg2 = 'is odd in each dimension.';
					msg = sprintf('%s\n%s\n\n',msg1,msg2);
					throwComment(msg,1,1);
					set(imageMorphologyParent,'pointer','arrow');
					set([SelectMorphType;allStrelButtons;allStrelSliders],'enable','on')
					return
				end
				% if ndims(img) > 2
				% throwComment('Processing layer-by-layer!',2,1);
				% altered = zeros(size(img));
				% for jj = 1:ndims(img)
				% altered(:,:,jj) = entropyfilt(img(:,:,jj),H);
				% end
				% else
				% altered = entropyfilt(img,H);
				% end
				altered = entropyfilt(img,H);
				if max(altered(:)) > 1
					isNormalized = true;
					altered = altered/max(altered(:));
					throwComment('Resulting image has been normalized by its maximum intensity.',2,1);
				else
					isNormalized = false;
				end
			case 'CONTRAST Enhancement'
				if islogical(img)
					throwComment('Contrast enhancement not appropriate for binary images!',2,1);
					set(imageMorphologyParent,'pointer','arrow');
					set([SelectMorphType;allStrelButtons;allStrelSliders],'enable','on')
					return
				end
				altered = imsubtract(imadd(img,imtophat(img,SE)), imbothat(img,SE));
				throwComment('Dilation, followed by erosion.',0,1);
			case 'BWHITMISS'
				throwComment(sprintf('Define SE1 in the STRELTOOL Panel 1 above,\nand SE2 in STRELTOOL Panel 2.'),2,1);
				throwComment('Alternatively, define variable "imageMorphologyInterval" IN THE BASE WORKSPACE.',0,1);
				throwComment('NOTE: As long as variable "imageMorphologyInterval" exists in the Base Workspace, STRELS defined in StrelTool will be ignored!',0,1);
				throwComment('HINT: Use the Variable Editor to change imageMorphologyInterval, then re-engage the BWHITMISS radio button to change the interval interactively.',0,1);
				imageMorphologyInterval = [];
				%SE, SE2, strelVal
				[SE2,strelVal2] = StrelTool(strel2Parent,[],true); %TRIGGER UPDATE
				%strelVal2
				try
					imageMorphologyInterval = evalin('base','imageMorphologyInterval');
				end
				if ~isempty(imageMorphologyInterval)
					altered = bwhitmiss(img,imageMorphologyInterval);
					throwComment('BW2 = bwhitmiss(BW1,INTERVAL)',0,1);
					disp('USING INTERVAL APPROACH');
				else
					altered = bwhitmiss(img,SE,SE2);
					throwComment('BW2 = bwhitmiss(BW1,SE1,SE2).',0,1);
					disp('USING SE1:SE2 APPROACH');
				end
			case 'BWAREAOPEN'
				minBlobSize = round(get(findall(tabCardHandles{1}(3),'tag','minBlobSize'),'value'));
				altered = bwareaopen(img,minBlobSize,connectivityValue);
			case 'BWDIST'
				altered = bwdist(img,distMethod);
			case 'BWULTERODE'
				altered = bwulterode(img,distMethod,connectivityValue);
			case 'BWMORPH'
				if ndims(img) > 2 %#ok
					throwComment('BWMORPH not defined for ndims(img) > 2',1,0)
					set(imageMorphologyParent,'pointer','arrow');
					set([SelectMorphType;allStrelButtons;allStrelSliders],'enable','on')
					return
				end
				strings = get(findall(tabCardHandles{1}(3),'tag','requestedBWMorphOperation'),'string');
				requestedBWMorphOperation = get(findall(tabCardHandles{1}(3),'tag','requestedBWMorphOperation'),'value');
				requestedBWMorphOperation = strings{requestedBWMorphOperation};
				bwmorphToInf = get(findall(tabCardHandles{1}(3),'tag','bwmorphInf'),'value');
				if bwmorphToInf
					bwmorphTimes = Inf;
				else
					bwmorphTimes = round(get(findall(tabCardHandles{1}(3),'tag','bwmorphTimes'),'value'));
				end
				altered = bwmorph(img,requestedBWMorphOperation,bwmorphTimes);
				if isinf(bwmorphTimes)
					bwmorphTimes = 'INF';
				else
					bwmorphTimes = num2str(bwmorphTimes);
				end
				throwComment(sprintf('BW2 = bwmorph(BW2, %s, %s).',upper(requestedBWMorphOperation),bwmorphTimes))
			case 'IMRECONSTRUCT'
				throwComment('NOT YET IMPLEMENTED!',1,1);
				altered = img;
			case 'SKIP'
				altered = img;
			otherwise
				throwComment('imageMorphology: Unrecognized trigger string!',1,1);
		end
		set(morphAlteredImg,'cdata',altered);
		set(axes2,'XLim',0.5+[0 size(altered,2)],'YLim',0.5+[0 size(altered,1)]);
		if get(autoadjust,'value')
			imadjustIt;
		else
			set(axes2,'CLimMode','auto')
		end
		try %#ok
			% This is in a try structure bc when the parent is not a
			% figure, it will otherwise error
			set(imageMorphologyParent,'pointer','arrow');
			set([SelectMorphType;allStrelButtons;allStrelSliders],'enable','on')
		end
		if ~imgIsBinary && ismember(request,{'BWMORPH'})
			% Note that {'BWDIST', 'BWHITMISS', 'BWDIST', 'BWAREAOPEN',
			% 'BWULTERODE'} support  binary double image (i.e.,
			% non-logical) images
			throwComment('This operation may be supported for binary images only; please check the doc!',1,0);
			%return %Don't return...uicontrols get out of sync. Just warn.
		end
	end

	function imadjustIt(varargin)
		mini = double(min(altered(:)));
		maxi = double(max(altered(:)));
		if mini ~= maxi
			set(axes2,'CLim',[mini maxi])
		end
	end

	function updateImage(varargin)
		if isempty(strelVal)
			% Nothing done yet...ignore!
			throwComment('I don''t think you''ve done anything yet. Have you???',1,1);
			return
		end
		img = get(imhandles(axes2),'cdata');
		set(originalImg,'cdata',img);
		title(axes1,'Original Image')
		writeOperation
	end

	function [img,imgoutName] = exportImage(varargin)
		img = get(morphAlteredImg,'cdata');
		n = 0; tmp3 = 1;
		while tmp3
			n = n + 1;
			tmp3 = evalin('base',['exist(''morphed', num2str(n), ''')']);
		end
		imgoutName = ['morphed' num2str(n)];
		if ~strcmp(parentName,'Image Morphology')
			target = ancestor(varargin{3},'figure','toplevel');
			target = imhandles(target);
			target = target(1);
			set(target,'cdata',img);
		end
		assignin('base',imgoutName,img);
		try %#ok
			assignin('caller',imgoutName,img);
		end
		setappdata(imageMorphologyParent,'imgoutName',imgoutName);
		msg = sprintf('Altered image written to morphed%d',n);
		fprintf('%s\n\n',msg)
		throwComment(msg,2,true);
		writeOperation
	end

	function writeOperation(varargin)
		% operation = {'imdilate','imerode','imopen','imclose','imtophat','imbothat','gradient','entropyfilt'};
		operation = get(SelectMorphType,'string');
		ind = cell2mat(get(SelectMorphType,'value'));
		operation = lower(operation{logical(ind)});
		%strelVal = getappdata(strel1Parent,'strelVal')%#ok ...this is intentional
		imgoutName = getappdata(imageMorphologyParent,'imgoutName');
		if isempty(imgoutName)
			imgoutName = 'morphed1';
			assignin('base',imgoutName,img);
			setappdata(imageMorphologyParent,'imgoutName',imgoutName);
		end
		msg = 'This operation has not yet been defined.';
		if isscalar(strelVal.opt1)
			opt1String = sprintf('%d',strelVal.opt1);
		else
			opt1String = sprintf('[%d %d]',strelVal.opt1(1),strelVal.opt1(2));
		end
		if isfield(strelVal,'opt2')
			if isscalar(strelVal.opt2)
				opt2String = sprintf('%d',strelVal.opt2);
			else
				opt2String = sprintf('[%d %d]',strelVal.opt2(1),strelVal.opt2(2));
			end
		end
		if isfield(strelVal,'opt3')
			msg2 = sprintf('SE  = strel(''%s'',%s,%s,%g);\n',strelVal.type,opt1String,opt2String,strelVal.opt3);
		elseif isfield(strelVal,'opt2')
				msg2 = sprintf('SE  = strel(''%s'',%s,%s);\n',strelVal.type,opt1String,opt2String);
		else
			msg2 = sprintf('SE  = strel(''%s'',%s);\n',strelVal.type,opt1String);
		end
		switch operation
			case {'imdilate','imerode','imopen','imclose','imtophat','imbothat'}
				fprintf('%s',msg2);
				msg = sprintf('%s = %s(IMG, SE);\n\n',imgoutName,operation);
			case 'gradient image'
				fprintf('%s',msg2);
				msg = sprintf('%s = imsubtract(imdilate(IMG, SE),imerode(IMG, SE));\n\n',imgoutName);
			case 'entropy filter'
				fprintf('%s',msg2);
				msg = sprintf('%s = entropyfilt(IMG,getnhood(SE));\n',imgoutName);
				if isNormalized
					msg = sprintf('%s%s = %s/max(%s(:));\n',msg,imgoutName,imgoutName,imgoutName);
				end
			case 'contrast enhancement'
				fprintf('%s',msg2);
				msg = sprintf('%s = imsubtract(imadd(IMG,imtophat(IMG,SE)),imbothat(IMG,SE));\n\n',imgoutName);
			case 'bwhitmiss'
				imageMorphologyInterval = [];
				try
					imageMorphologyInterval = evalin('base','imageMorphologyInterval');
				end
				if ~isempty(imageMorphologyInterval)
					msg = sprintf('%s = bwhitmiss(IMG, INTERVAL);\n(INTERVAL is as defined in base workspace.)\n\n',imgoutName);
				else
					strelVal2 = getappdata(strel2Parent,'strelVal')%#ok ...this is intentional
					msg = sprintf('%s = bwhitmiss(IMG,strel(''%s'',%g),strel(''%s'',%g));\n\n',imgoutName,strelVal.type,strelVal.opt1,strelVal2.type,strelVal2.opt1);
				end
			case 'bwareaopen'
				strings = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'string');
				connectivityValue = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'value');
				connectivityValue = str2double(strings{connectivityValue});
				minBlobSize = round(get(findall(tabCardHandles{1}(3),'tag','minBlobSize'),'value'));
				msg = sprintf('%s = bwareaopen(IMG,%g,%g);\n\n',imgoutName,minBlobSize,connectivityValue);
			case 'bwdist'
				strings = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'string');
				distMethod = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'value');
				distMethod = strings{distMethod};
				msg = sprintf('%s = bwdist(IMG, ''%s'');\n\n',imgoutName,distMethod);
			case 'bwulterode'
				strings = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'string');
				distMethod = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'value');
				distMethod = strings{distMethod};
				strings = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'string');
				connectivityValue = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'value');
				connectivityValue = str2double(strings{connectivityValue});
				msg = sprintf('%s = bwulterode(IMG, ''%s'', %g);\n\n',imgoutName,distMethod,connectivityValue);
			case 'bwmorph'
				strings = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'string');
				distMethod = get(findall(tabCardHandles{1}(3),'tag','distanceMetric'),'value');
				distMethod = strings{distMethod};
				strings = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'string');
				connectivityValue = get(findall(tabCardHandles{1}(3),'tag','connectivityValue'),'value');
				connectivityValue = str2double(strings{connectivityValue});
				strings = get(findall(tabCardHandles{1}(3),'tag','requestedBWMorphOperation'),'string');
				requestedBWMorphOperation = get(findall(tabCardHandles{1}(3),'tag','requestedBWMorphOperation'),'value');
				requestedBWMorphOperation = strings{requestedBWMorphOperation};
				bwmorphToInf = get(findall(tabCardHandles{1}(3),'tag','bwmorphInf'),'value');
				if bwmorphToInf
					bwmorphTimes = Inf;
				else
					bwmorphTimes = round(get(findall(tabCardHandles{1}(3),'tag','bwmorphTimes'),'value'));
				end
				msg = sprintf('%s = bwmorph(IMG, ''%s'', %g);\n\n',imgoutName,requestedBWMorphOperation,bwmorphTimes);
		end
		fprintf('%s\n',msg)
	end %writeOperation

	function throwComment(commentString,beepOn,append)
		if nargin < 2
			beepOn = 0;
		end
		if nargin < 3
			append = 0;
		end
		if append
			currString = get(instructBox,'string');
			currString = char(cellstr({currString;commentString}));
			if all(double(currString(1,:)== 32))
				currString = currString(2:end,:);
			end
			set(instructBox,'string',currString);
		else
			set(instructBox,'string',commentString);
		end
		tmp = size(get(instructBox,'string'),1);
		set(instructBox,'listboxtop',tmp,'value',tmp);
		switch beepOn
			case 1
				beep;
			case 2
				[wav,freq] = audioread('notify.wav');
				sound(wav,freq);
			case 3
				[chimes,freq] = audioread('chimes.wav');
				sound(chimes,freq);
		end
		drawnow;
	end %throwComment

	function GetNewFile(varargin)
		set(gcbo,'state','off');
		[newImg,newCmap,newFname,newFpath,userCanceled] = getNewImage(false);
		if userCanceled
			return
		else
			img = newImg;
			cmap = newCmap;
			fname = newFname;
			fpath = newFpath;
		end
		cla(axes1);
		originalImg = imshow(img,'parent',axes1);
		expandAxes(axes1);
		title(fname,'interpreter','none');
		% Note: I can't figure out why the following line is
		% needed, but the axis is sometimes not updating
		% limits properly when I load a new image.
		% (XLIMMODE, etc. are somehow manual at this point. WHY???)
		%set(ImageAxis','XLimMode','manual','YLimMode','manual');
		set(axes1,'XLim',0.5+[0 size(img,2)],'YLim',0.5+[0 size(img,1)]);
		morphOp;
	end %GetNewFile

end
% END NESTED FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% START SUBFUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [objpos,objdim] = distributeObjects(nobjects,startpos,endpos,gap,warnoff)
%[objpos, objdim] = distributeObjects(nobjects, startpos, endpos, gap, warnoff)
%
%Returns the proper positions and size for uniformly spaced GUI objects.
%
%Enter the number of objects (nobjects), the starting position (startpos),
%the end position (endpos), and the gap, and this function will return a
%vector of starting points (objpos) as well as a dimension for all
%uniformly sized, equally spaced objects (buttons, boxes, etc.).
%
%This works for horizontal OR vertical distribution of items, as long as
%startpos < endpos, and for normalized or any other kind of unit .
%
% E.g., To uniformly distributeObjects 4 buttons horizontally starting at 10
% pixels, ending at 100 pixels, and with a gap of 5 pixels,
% [objpos,objdim] = distributeObjects(4,10,100,5) returns
% objpos = [10.0000 33.7500 57.5000 81.2500],
% objdim = 18.7500
% Thus, your GUI buttons should be positioned at
% [objpos(1) y objdim height], [objpos(2) y objdim height],....
%
%Written by Brett Shoelson
%12/09/03
%shoelson@helix.nih.gov

if nargin<5
	warnoff = 0;
end

rev = 0;
if startpos > endpos
	rev = 1;
	tmp = endpos;
	endpos = startpos;
	startpos = tmp;
end

objdim = ((endpos-startpos)-(nobjects-1)*gap)/nobjects;
objpos = startpos:objdim+gap:endpos;
%Account for case of gap==0, which generates a starting point at the end of
%the object range.
objpos = objpos(1:nobjects);

if rev
	objpos = objpos(end:-1:1);
end
if ~warnoff && (any(objpos < 0) || objdim < 0)
	warndlg('The parameters you entered result in a negative starting point or dimension. You may want to rethink that.');
end

end %distributeObjects

% END SUBFUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%